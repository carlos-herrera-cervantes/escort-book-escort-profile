// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/repositories (interfaces: IAttentionSiteRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-escort-profile/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAttentionSiteRepository is a mock of IAttentionSiteRepository interface.
type MockIAttentionSiteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAttentionSiteRepositoryMockRecorder
}

// MockIAttentionSiteRepositoryMockRecorder is the mock recorder for MockIAttentionSiteRepository.
type MockIAttentionSiteRepositoryMockRecorder struct {
	mock *MockIAttentionSiteRepository
}

// NewMockIAttentionSiteRepository creates a new mock instance.
func NewMockIAttentionSiteRepository(ctrl *gomock.Controller) *MockIAttentionSiteRepository {
	mock := &MockIAttentionSiteRepository{ctrl: ctrl}
	mock.recorder = &MockIAttentionSiteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttentionSiteRepository) EXPECT() *MockIAttentionSiteRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIAttentionSiteRepository) Count(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIAttentionSiteRepositoryMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIAttentionSiteRepository)(nil).Count), arg0, arg1)
}

// Create mocks base method.
func (m *MockIAttentionSiteRepository) Create(arg0 context.Context, arg1 *models.AttentionSite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAttentionSiteRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAttentionSiteRepository)(nil).Create), arg0, arg1)
}

// DeleteOne mocks base method.
func (m *MockIAttentionSiteRepository) DeleteOne(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockIAttentionSiteRepositoryMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockIAttentionSiteRepository)(nil).DeleteOne), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIAttentionSiteRepository) GetAll(arg0 context.Context, arg1 string, arg2, arg3 int) ([]models.AttentionSiteDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.AttentionSiteDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIAttentionSiteRepositoryMockRecorder) GetAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIAttentionSiteRepository)(nil).GetAll), arg0, arg1, arg2, arg3)
}

// GetOne mocks base method.
func (m *MockIAttentionSiteRepository) GetOne(arg0 context.Context, arg1 string) (models.AttentionSiteDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(models.AttentionSiteDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIAttentionSiteRepositoryMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIAttentionSiteRepository)(nil).GetOne), arg0, arg1)
}
