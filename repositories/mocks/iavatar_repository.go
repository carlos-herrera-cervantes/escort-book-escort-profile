// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/repositories (interfaces: IAvatarRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-escort-profile/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAvatarRepository is a mock of IAvatarRepository interface.
type MockIAvatarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAvatarRepositoryMockRecorder
}

// MockIAvatarRepositoryMockRecorder is the mock recorder for MockIAvatarRepository.
type MockIAvatarRepositoryMockRecorder struct {
	mock *MockIAvatarRepository
}

// NewMockIAvatarRepository creates a new mock instance.
func NewMockIAvatarRepository(ctrl *gomock.Controller) *MockIAvatarRepository {
	mock := &MockIAvatarRepository{ctrl: ctrl}
	mock.recorder = &MockIAvatarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAvatarRepository) EXPECT() *MockIAvatarRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAvatarRepository) Create(arg0 context.Context, arg1 *models.Avatar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAvatarRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAvatarRepository)(nil).Create), arg0, arg1)
}

// DeleteOne mocks base method.
func (m *MockIAvatarRepository) DeleteOne(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockIAvatarRepositoryMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockIAvatarRepository)(nil).DeleteOne), arg0, arg1)
}

// GetOne mocks base method.
func (m *MockIAvatarRepository) GetOne(arg0 context.Context, arg1 string) (models.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(models.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIAvatarRepositoryMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIAvatarRepository)(nil).GetOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockIAvatarRepository) UpdateOne(arg0 context.Context, arg1 string, arg2 *models.Avatar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockIAvatarRepositoryMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockIAvatarRepository)(nil).UpdateOne), arg0, arg1, arg2)
}
