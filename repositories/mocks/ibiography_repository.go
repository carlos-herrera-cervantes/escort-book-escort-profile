// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/repositories (interfaces: IBiographyRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-escort-profile/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBiographyRepository is a mock of IBiographyRepository interface.
type MockIBiographyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBiographyRepositoryMockRecorder
}

// MockIBiographyRepositoryMockRecorder is the mock recorder for MockIBiographyRepository.
type MockIBiographyRepositoryMockRecorder struct {
	mock *MockIBiographyRepository
}

// NewMockIBiographyRepository creates a new mock instance.
func NewMockIBiographyRepository(ctrl *gomock.Controller) *MockIBiographyRepository {
	mock := &MockIBiographyRepository{ctrl: ctrl}
	mock.recorder = &MockIBiographyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBiographyRepository) EXPECT() *MockIBiographyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBiographyRepository) Create(arg0 context.Context, arg1 *models.Biography) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBiographyRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBiographyRepository)(nil).Create), arg0, arg1)
}

// DeleteOne mocks base method.
func (m *MockIBiographyRepository) DeleteOne(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockIBiographyRepositoryMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockIBiographyRepository)(nil).DeleteOne), arg0, arg1)
}

// GetOne mocks base method.
func (m *MockIBiographyRepository) GetOne(arg0 context.Context, arg1 string) (models.Biography, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(models.Biography)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIBiographyRepositoryMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIBiographyRepository)(nil).GetOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockIBiographyRepository) UpdateOne(arg0 context.Context, arg1 string, arg2 *models.Biography) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockIBiographyRepositoryMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockIBiographyRepository)(nil).UpdateOne), arg0, arg1, arg2)
}
