// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/repositories (interfaces: IIdentificationRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-escort-profile/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIIdentificationRepository is a mock of IIdentificationRepository interface.
type MockIIdentificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIIdentificationRepositoryMockRecorder
}

// MockIIdentificationRepositoryMockRecorder is the mock recorder for MockIIdentificationRepository.
type MockIIdentificationRepositoryMockRecorder struct {
	mock *MockIIdentificationRepository
}

// NewMockIIdentificationRepository creates a new mock instance.
func NewMockIIdentificationRepository(ctrl *gomock.Controller) *MockIIdentificationRepository {
	mock := &MockIIdentificationRepository{ctrl: ctrl}
	mock.recorder = &MockIIdentificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIdentificationRepository) EXPECT() *MockIIdentificationRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIIdentificationRepository) Count(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIIdentificationRepositoryMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIIdentificationRepository)(nil).Count), arg0)
}

// Create mocks base method.
func (m *MockIIdentificationRepository) Create(arg0 context.Context, arg1 *models.Identification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIIdentificationRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIIdentificationRepository)(nil).Create), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIIdentificationRepository) GetAll(arg0 context.Context, arg1 string) ([]models.Identification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]models.Identification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIIdentificationRepositoryMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIIdentificationRepository)(nil).GetAll), arg0, arg1)
}

// GetOne mocks base method.
func (m *MockIIdentificationRepository) GetOne(arg0 context.Context, arg1 string) (models.Identification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(models.Identification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIIdentificationRepositoryMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIIdentificationRepository)(nil).GetOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockIIdentificationRepository) UpdateOne(arg0 context.Context, arg1 string, arg2 *models.Identification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockIIdentificationRepositoryMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockIIdentificationRepository)(nil).UpdateOne), arg0, arg1, arg2)
}
