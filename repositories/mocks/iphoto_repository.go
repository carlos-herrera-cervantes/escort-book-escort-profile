// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/repositories (interfaces: IPhotoRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-escort-profile/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPhotoRepository is a mock of IPhotoRepository interface.
type MockIPhotoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPhotoRepositoryMockRecorder
}

// MockIPhotoRepositoryMockRecorder is the mock recorder for MockIPhotoRepository.
type MockIPhotoRepositoryMockRecorder struct {
	mock *MockIPhotoRepository
}

// NewMockIPhotoRepository creates a new mock instance.
func NewMockIPhotoRepository(ctrl *gomock.Controller) *MockIPhotoRepository {
	mock := &MockIPhotoRepository{ctrl: ctrl}
	mock.recorder = &MockIPhotoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPhotoRepository) EXPECT() *MockIPhotoRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIPhotoRepository) Count(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIPhotoRepositoryMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIPhotoRepository)(nil).Count), arg0, arg1)
}

// Create mocks base method.
func (m *MockIPhotoRepository) Create(arg0 context.Context, arg1 *models.Photo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPhotoRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPhotoRepository)(nil).Create), arg0, arg1)
}

// DeleteOne mocks base method.
func (m *MockIPhotoRepository) DeleteOne(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockIPhotoRepositoryMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockIPhotoRepository)(nil).DeleteOne), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIPhotoRepository) GetAll(arg0 context.Context, arg1 string, arg2, arg3 int) ([]models.Photo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Photo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIPhotoRepositoryMockRecorder) GetAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIPhotoRepository)(nil).GetAll), arg0, arg1, arg2, arg3)
}

// GetOne mocks base method.
func (m *MockIPhotoRepository) GetOne(arg0 context.Context, arg1 string) (models.Photo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(models.Photo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIPhotoRepositoryMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIPhotoRepository)(nil).GetOne), arg0, arg1)
}
