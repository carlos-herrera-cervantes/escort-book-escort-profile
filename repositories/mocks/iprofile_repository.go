// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/repositories (interfaces: IProfileRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-escort-profile/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProfileRepository is a mock of IProfileRepository interface.
type MockIProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileRepositoryMockRecorder
}

// MockIProfileRepositoryMockRecorder is the mock recorder for MockIProfileRepository.
type MockIProfileRepositoryMockRecorder struct {
	mock *MockIProfileRepository
}

// NewMockIProfileRepository creates a new mock instance.
func NewMockIProfileRepository(ctrl *gomock.Controller) *MockIProfileRepository {
	mock := &MockIProfileRepository{ctrl: ctrl}
	mock.recorder = &MockIProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfileRepository) EXPECT() *MockIProfileRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIProfileRepository) Count(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIProfileRepositoryMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIProfileRepository)(nil).Count), arg0)
}

// Create mocks base method.
func (m *MockIProfileRepository) Create(arg0 context.Context, arg1 *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIProfileRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIProfileRepository)(nil).Create), arg0, arg1)
}

// DeleteOne mocks base method.
func (m *MockIProfileRepository) DeleteOne(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockIProfileRepositoryMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockIProfileRepository)(nil).DeleteOne), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIProfileRepository) GetAll(arg0 context.Context, arg1, arg2 int) ([]models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIProfileRepositoryMockRecorder) GetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIProfileRepository)(nil).GetAll), arg0, arg1, arg2)
}

// GetOne mocks base method.
func (m *MockIProfileRepository) GetOne(arg0 context.Context, arg1 string) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIProfileRepositoryMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIProfileRepository)(nil).GetOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockIProfileRepository) UpdateOne(arg0 context.Context, arg1 string, arg2 *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockIProfileRepositoryMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockIProfileRepository)(nil).UpdateOne), arg0, arg1, arg2)
}
