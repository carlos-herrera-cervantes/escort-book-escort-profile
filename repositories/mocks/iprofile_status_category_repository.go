// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/repositories (interfaces: IProfileStatusCategoryRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-escort-profile/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProfileStatusCategoryRepository is a mock of IProfileStatusCategoryRepository interface.
type MockIProfileStatusCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileStatusCategoryRepositoryMockRecorder
}

// MockIProfileStatusCategoryRepositoryMockRecorder is the mock recorder for MockIProfileStatusCategoryRepository.
type MockIProfileStatusCategoryRepositoryMockRecorder struct {
	mock *MockIProfileStatusCategoryRepository
}

// NewMockIProfileStatusCategoryRepository creates a new mock instance.
func NewMockIProfileStatusCategoryRepository(ctrl *gomock.Controller) *MockIProfileStatusCategoryRepository {
	mock := &MockIProfileStatusCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockIProfileStatusCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfileStatusCategoryRepository) EXPECT() *MockIProfileStatusCategoryRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIProfileStatusCategoryRepository) Count(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIProfileStatusCategoryRepositoryMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIProfileStatusCategoryRepository)(nil).Count), arg0)
}

// GetAll mocks base method.
func (m *MockIProfileStatusCategoryRepository) GetAll(arg0 context.Context, arg1, arg2 int) ([]models.ProfileStatusCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.ProfileStatusCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIProfileStatusCategoryRepositoryMockRecorder) GetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIProfileStatusCategoryRepository)(nil).GetAll), arg0, arg1, arg2)
}

// GetById mocks base method.
func (m *MockIProfileStatusCategoryRepository) GetById(arg0 context.Context, arg1 string) (models.ProfileStatusCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(models.ProfileStatusCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIProfileStatusCategoryRepositoryMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIProfileStatusCategoryRepository)(nil).GetById), arg0, arg1)
}

// GetOneByName mocks base method.
func (m *MockIProfileStatusCategoryRepository) GetOneByName(arg0 context.Context, arg1 string) (models.ProfileStatusCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByName", arg0, arg1)
	ret0, _ := ret[0].(models.ProfileStatusCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByName indicates an expected call of GetOneByName.
func (mr *MockIProfileStatusCategoryRepositoryMockRecorder) GetOneByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByName", reflect.TypeOf((*MockIProfileStatusCategoryRepository)(nil).GetOneByName), arg0, arg1)
}
