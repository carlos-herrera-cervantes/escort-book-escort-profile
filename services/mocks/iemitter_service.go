// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/services (interfaces: IEmitterService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEmitterService is a mock of IEmitterService interface.
type MockIEmitterService struct {
	ctrl     *gomock.Controller
	recorder *MockIEmitterServiceMockRecorder
}

// MockIEmitterServiceMockRecorder is the mock recorder for MockIEmitterService.
type MockIEmitterServiceMockRecorder struct {
	mock *MockIEmitterService
}

// NewMockIEmitterService creates a new mock instance.
func NewMockIEmitterService(ctrl *gomock.Controller) *MockIEmitterService {
	mock := &MockIEmitterService{ctrl: ctrl}
	mock.recorder = &MockIEmitterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmitterService) EXPECT() *MockIEmitterServiceMockRecorder {
	return m.recorder
}

// AddListener mocks base method.
func (m *MockIEmitterService) AddListener(arg0 string, arg1 chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddListener", arg0, arg1)
}

// AddListener indicates an expected call of AddListener.
func (mr *MockIEmitterServiceMockRecorder) AddListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockIEmitterService)(nil).AddListener), arg0, arg1)
}

// Emit mocks base method.
func (m *MockIEmitterService) Emit(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", arg0, arg1)
}

// Emit indicates an expected call of Emit.
func (mr *MockIEmitterServiceMockRecorder) Emit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockIEmitterService)(nil).Emit), arg0, arg1)
}

// RemoveListener mocks base method.
func (m *MockIEmitterService) RemoveListener(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveListener", arg0)
}

// RemoveListener indicates an expected call of RemoveListener.
func (mr *MockIEmitterServiceMockRecorder) RemoveListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockIEmitterService)(nil).RemoveListener), arg0)
}
