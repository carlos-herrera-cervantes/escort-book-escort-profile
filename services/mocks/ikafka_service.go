// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-escort-profile/services (interfaces: IKafkaService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIKafkaService is a mock of IKafkaService interface.
type MockIKafkaService struct {
	ctrl     *gomock.Controller
	recorder *MockIKafkaServiceMockRecorder
}

// MockIKafkaServiceMockRecorder is the mock recorder for MockIKafkaService.
type MockIKafkaServiceMockRecorder struct {
	mock *MockIKafkaService
}

// NewMockIKafkaService creates a new mock instance.
func NewMockIKafkaService(ctrl *gomock.Controller) *MockIKafkaService {
	mock := &MockIKafkaService{ctrl: ctrl}
	mock.recorder = &MockIKafkaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKafkaService) EXPECT() *MockIKafkaServiceMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockIKafkaService) SendMessage(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIKafkaServiceMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIKafkaService)(nil).SendMessage), arg0, arg1)
}
